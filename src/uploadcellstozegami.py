#!/usr/bin/env python
# coding: utf-8

import argparse
import os
import sys
import time


# Command line script to:
# INPUTS:
#       Path to Label matrix
#       Path to folder of multiplex images - as numChannels images, size (h x w)
#       Path to file with channel names and stains

# Currently running as a script for testing purposes
runAsScript = False
yamlFile = "zegamicell.yaml"
zegamiTable = "cellData.tab"
imageDir = "SegmentationImages"

def AnalysisNameFromPath(path):
    # Returns a string that uniquely identifies the roi based on the directory name
    # input:
    # /t1-data/project/covidhyperion/staylor/covid2/tree/COVID/SAMPLE_1/ROI_1/deepcell
    # output:
    # COVID_SAMPLE_1_ROI_1
    
    # normpath collapses redundant separators and uplevel references 
    (p0,analysis)=os.path.split(os.path.normpath(path))
    (p1,roi)=os.path.split(p0)
    (p2,sample)=os.path.split(p1)
    (p3,source)=os.path.split(p2)
    name = '_'.join([source,sample,roi])
    return name


if not runAsScript:
    # Create the parser
    parser = argparse.ArgumentParser(description='Extract marker intensities on a per-cell basis, based on existing cell segmentation data.')

    # Add the arguments
    parser.add_argument('--analysisName',
                       type=str,
                       help='the name of this analysis (will derive the name from the path if not set)')
    parser.add_argument('pathToWorkingFolder',
                       type=str,
                       help='the path to the folder containing the cellData file')
    parser.add_argument('zegamiProjectID',
                       type=str,
                       help='workspace ID to upload this project to')
    parser.add_argument('--verbose',
                        help='display progress messages',
                        action="store_true")
    parser.add_argument('--cellSegmentationImagesExtension',
                        help='file extension used to save cell images (default .png)',
                        type=str,
                        choices=['.png','.jpg','.tif'],
                        default='.png')
    parser.add_argument('--analysisNameOptionalSuffix',
                       type=str,
                       help='suffix to add to the analysisName when uploading to Zegami',
                       default='')
    parser.add_argument('--removeImages',
                       help='remove the image files when uploaded to preserve number of inodes',
                       action="store_true")

    # Execute the parse_args() method
    args = parser.parse_args()

    pathToWorkingFolder = args.pathToWorkingFolder
    analysisName = AnalysisNameFromPath(pathToWorkingFolder) 
    zegamiProjectID = args.zegamiProjectID
    verbose = args.verbose
    cellSegmentationImagesExtension = args.cellSegmentationImagesExtension
    analysisNameOptionalSuffix = args.analysisNameOptionalSuffix
    

    if not os.path.isdir(pathToWorkingFolder):
        print('The working folder specified does not exist')
        sys.exit()


else:
    # For testing purposes
    analysisName = 'COVID_Sample_1_ROI_2'
    pathToWorkingFolder = '/Filers/home/j/jbull/TEMP_Test/'#'/stopgap/hyperion/lho/covid/TEMP_test/'
    verbose = True
    cellSegmentationImagesExtension = '.png'
    zegamiProjectID = 'XY6PsWre'

#if not os.path.isfile(pathToWorkingFolder + analysisName + '_cellData.csv'):
#    print('Cannot find: ' + pathToWorkingFolder + analysisName + '_cellData.csv')
#    print('Have you run SignalExtraction_CommandLine.py first?')
#    sys.exit()
    
pathToImageFolder = pathToWorkingFolder + imageDir

nameOfYamlFile = pathToWorkingFolder + yamlFile
if verbose:
    print('Generating: ' + nameOfYamlFile)


with open(nameOfYamlFile, 'w') as file:
    t = time.strftime("%D %H:%M:%S",time.localtime())
    file.write('# Yaml file autogenerated: ' + t + '\n')
    refLine = '# zeg create collections --project ' + zegamiProjectID + ' --config ' + nameOfYamlFile
    file.write(refLine + '\n')

    file.write('# The name of the collection\n')
    file.write('name: ' + analysisName + analysisNameOptionalSuffix + '\n')
    file.write('description: ' + analysisName + analysisNameOptionalSuffix + '\n')
    file.write('# The type of data set. For now this needs to be set to \'file\'. (optional)\n')
    file.write('dataset_type: file\n')
    file.write('# Config for the file data set type\n')
    file.write('imageset_type: file\n')
    file.write('# Config for the file image set type\n')
    file.write('file_config:\n')
    file.write('# Whether to recursively scan any directories. (optional)\n')
    file.write('    recursive: True\n')
    file.write('# If provided, the mime-type to use when uploading images. (optional)\n')
    file.write('    mime_type: image/jpeg\n')
    file.write('# Path to the dataset file. (optional)\n')
    file.write('    path: ' + pathToWorkingFolder + zegamiTable +'\n')
    file.write('# A collection of paths to image files. Paths can be to both images and directories\n')
    file.write('    paths:\n')
    file.write('        - ' + pathToImageFolder + '\n')
    file.write('# Name of the column in the dataset that contains the image name. (optional)\n')
    file.write('dataset_column: Image Name\n')


if verbose:
    print('Creating collection: ' + analysisName + analysisNameOptionalSuffix + ', in Zegami workspace Project ID: ' + zegamiProjectID)
os.system('module load zegami-cli; zeg create collections --project ' + zegamiProjectID + ' --config ' + nameOfYamlFile)

if (args.removeImages and os.path.isdir(pathToImageFolder)):
    print("Removing all images in " + pathToImageFolder + "...")
    # using find may be slightsly safer but slow
    os.system("rm -rf "+pathToImageFolder)
else:
    print(pathToImageFolder + " does not exist.")